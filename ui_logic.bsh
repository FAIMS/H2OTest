    
/****** 
 FAIMS Logic File generated by Heurist Vsn 3.2.0, Tuesday 5th of August 2014 09:45:56 AM
 Database: hdb_adela_H2O   Heurist user:Adela Sobotkova
 ******/

User user;
String userid;

showWarning("Ver 25. Thanks for trying this module!", "This module has been generated from a Heurist database structure. You can customise the module yourself or we can help you. Contact info@fedarch.org for help.");

//stack of tabs in use
ArrayList tabs_edit = new ArrayList(); //list of edit form in use 
ArrayList tabs_select = new ArrayList(); //list of calls to select (see last_invoker)
//keeps rectype to select(browse) and field path to assign the result of selection
// for example Person=DigitalMediaItem/DigitalMediaItem_General_Information/Creators
String last_invoker = null; 
List attachedGeometry = null;

/*** EVENTS ***/
onEvent("control/data", "show", "refreshEntities()");
onEvent("control/data/entityTypeList", "click", "refreshEntities()");
onEvent("user/usertab/login", "click", "login()"); 

onEvent("control/data/entityList", "click", "loadEntity()"); //load entity after tap in the list
onEvent("control/data/newEntity", "click", "newEntity(null)");
//selectEntity tab
onEvent("selectEntity/data", "show", "onShowSelect()");
onEvent("selectEntity/data/entityList", "click", "onSelectEntity()");
onEvent("selectEntity/data/newEntity", "click", "onAddNewEntityWhenSelect()");

/*** START: this section of code depends on the module and entity types selected ***/

onEvent("WaterSupply", "show", "onShowEditForm(\"WaterSupply\")");
onEvent("WaterSupply/WaterSupply_General_Information/Update", "delayclick", "saveEntity(\"WaterSupply\", false)");
onEvent("WaterSupply/WaterSupply_General_Information/UpdateAndClose", "delayclick", "saveEntity(\"WaterSupply\", true)");
onEvent("WaterSupply/WaterSupply_General_Information/Delete", "delayclick", "deleteEntity(\"WaterSupply\")");

//
// find related entity and fill pointer attrubute with their names
//
loadRelatedEntities(rectype){
    
}      

//
// return entity name by tab name
//
getEntityNameByTabname(rectype) {
    
            if("WaterSupply".equals(rectype)){
                return "Water Supply";
            }
        return null;
}

//
// get tab name by entity name
//
getTabnameByEntityName(entname) {
    
            if("Water Supply".equals(entname)){
                return "WaterSupply";
            }
        return null;
}

//
//
//
checkMandatoryAttributes(rectype){
    String msg = "";
    
            if("WaterSupply".equals(rectype)){
                
                        value = getFieldValue("WaterSupply/WaterSupply_General_Information/ProblemDescription");
                        if( null==value || "".equals(value) ){
                            msg = msg + "Problem Description\n";
                        }
                        value = getFieldValue("WaterSupply/WaterSupply_General_Information/ProblemFrequency");
                        if( null==value || "".equals(value) ){
                            msg = msg + "Problem Frequency\n";
                        }
                        value = getFieldValue("WaterSupply/WaterSupply_General_Information/ProblemDuration");
                        if( null==value || "".equals(value) ){
                            msg = msg + "Problem Duration\n";
                        }
                        value = getFieldValue("WaterSupply/WaterSupply_General_Information/TypeOfStructure");
                        if( null==value || "".equals(value) ){
                            msg = msg + "Type of Structure\n";
                        }
                        value = getFieldValue("WaterSupply/WaterSupply_General_Information/FloorWhereProblemNoted");
                        if( null==value || "".equals(value) ){
                            msg = msg + "Floor where problem noted\n";
                        }
            }
        
    return msg;
}

//
// load all selectors for terms for every rectype 
//
loadAllAttributes(){
    showToast("load attributes");
    
populateRadioGroup("WaterSupply/WaterSupply_General_Information/ProblemFrequency", makeVocab("Problem Frequency"));
populateRadioGroup("WaterSupply/WaterSupply_General_Information/ProblemDuration", makeVocab("Problem Duration"));
populateRadioGroup("WaterSupply/WaterSupply_General_Information/ProblemOnset", makeVocab("Problem Onset"));
populateDropDown("WaterSupply/WaterSupply_General_Information/ProblemHistory", makeVocab("Problem History"));
populateDropDown("WaterSupply/WaterSupply_General_Information/TypeOfStructure", makeVocab("Type of Structure"));
}

/*** END: this section of code depends on the module and entity types selected ***/

/*** navigation functions ***/
//
// onshow list of entities (to fill pointer field)
//
onShowSelect(){    

    if(tabs_select.size()>0 && last_invoker.equals(tabs_select.get(tabs_select.size()-1))){
        //inital call - open new select
    
    }else{
        //back call - return after new entity addition
        if(tabs_edit.size()>0){
            tabs_edit.remove(tabs_edit.size()-1);
        }
    }
    
        String last_select_callback = tabs_select.get(tabs_select.size()-1);
    
        String[] parts = last_select_callback.split("=");
        String rectype = parts[0]; //rectype to search
        String fieldpath = parts[1]; //
    
        //search entity for given entType    
        String entName = getEntityNameByTabname( rectype );
        populateList("selectEntity/data/entityList", fetchEntityList(entName));
    
}
//
// onshow edit form for particular entity
//
onShowEditForm(rectype){

    if(tabs_edit.size()>0 && rectype.equals(tabs_edit.get(tabs_edit.size()-1))){
        //return from select
        if(tabs_select.size()>0){
            tabs_select.remove(tabs_select.size()-1);
        }
    }else{
        tabs_edit.add(rectype);
    }
}
/*** selectEntity functions ***/
//
// search for resource for pointer filed - open select tab
// rectype - to search
// fieldpath - field to assign 
//
startSelectEntity(rectype, fieldpath) {

    last_invoker = rectype+"="+fieldpath;

    tabs_select.add(rectype+"="+fieldpath); //keep last call
    showTabGroup("selectEntity");
    
}
//
// create new record from select (in case required resource not found)
//
onAddNewEntityWhenSelect(){
    String last_select_callback = tabs_select.get(tabs_select.size()-1);
    String[] parts = last_select_callback.split("=");
    String rectype = parts[0];
    
    for (String rt : tabs_edit) {
        if (rt.equals(rectype) ) {
            //prevents show edit form in case it is already in use
            showWarning("Already in use", "Can not create new "+rectype+". Save previous");    
            return;
        }
    }    
    
    newTabGroup(rectype); //load and clear fields    
}
//
// user click on record in list - back to edit form and fill pointer field
//
onSelectEntity() {

    String uid = getListItemValue(); //get id from list
    String last_select_callback = tabs_select.get(tabs_select.size()-1);
    
    String[] parts = last_select_callback.split("=");
    String fieldname = parts[1]; //
    parts = fieldname.split("/");
    String rectype = parts[0]; //editing rectype
    String rectype_tab = parts[1];
    String field = parts[2];

    //back to edit form
    cancelTabGroup("selectEntity", false);
    showTab(rectype+"/"+rectype_tab);
    
    showToast("selected "+uid);
    
    //ArrayList pairs = new ArrayList();
    //pairs.add(new NameValuePair("selected "+uid, uid));

    //fill pointer field    
    populateDropDown(fieldname, loadEntity(uid) );
    
    String fieldname_uid = getPointerFiledName(fieldname);
    setFieldValue(fieldname_uid, uid);    
}
//
// Returns path to UID field on hidden tab for given resource attribute (field)
//
getPointerFiledName(fieldname){
    String[] parts = fieldname.split("/");
    parts[1] = parts[0]+"_uids"; //hidden tab with uid fields
    parts[2] = parts[2]+"_UID";  //pointer field to keep UID of resource record 
    return parts[0]+"/"+parts[1]+"/"+parts[2];
}
//
// Clear resource attribute (field) - dropdown and UID field on hidden tab
//
clearPointer(fieldname){
    ArrayList pairs = new ArrayList();
    pairs.add(new NameValuePair("select with Browse button(s)", ""));
    populateDropDown(fieldname, pairs );
    
    String fieldname_uid = getPointerFiledName(fieldname);
    setFieldValue(fieldname_uid, "");
}
//
// Fill dropdown (name) for pointer field by value of hidden UID field
//
fillPointer(fieldname){
    String fieldname_uid = getPointerFiledName(fieldname);
    String res_id = getFieldValue(fieldname_uid);
    if(null==res_id || "".equals(res_id) || "null".equals(res_id)){
        clearPointer(fieldname);
    }else{
        populateDropDown(fieldname, loadEntity(res_id));
    }
}

/*** record management function ***/

//
// Create new record for main entity 
// (some entities are not accessible from main tab - they can be added from select tab only)
//
newEntity(rectype){
    
    if (isNull(rectype)){
        rectype = getFieldValue("control/data/entityTypeList");
    }
    
    for (String rt : tabs_edit) {
        if (rt.equals(rectype) ) {
            showWarning("Already in use", "Can not create new "+rectype+". Save previous");    
            return;
        }
    }    
    
    newTabGroup(rectype); //load and clear fields
}
//
// Select record in list - load edit form 
//
loadEntity() {
    String uid = getListItemValue(); //get id from list
    String rectype = getFieldValue("control/data/entityTypeList");
    loadEntityById(uid, rectype);
}
//
// Show edit form by record id and record type
//
loadEntityById(entid, rectype) {
    
    if (isNull(entid)) return;
    
    showToast(entid);
    showTabGroup(rectype, entid);
    
    setFieldValue(rectype+"/"+rectype+"_uids/FAIMS_UID", entid);
    
    loadRelatedEntities(rectype); 
    //updateRelns();
}

//
// load entity by UID (used to populate dropdown for pointer fields)
//
loadEntity(uid){
    return fetchAll(""+
"SELECT uuid, group_concat(coalesce(measure   || ' '  || vocabname || '('  ||  freetext ||'; '|| (certainty * 100.0) || '% certain)',  "+
"                                     measure   || ' (' || freetext  || '; ' || (certainty * 100.0) || '% certain)',  "+
"                                     vocabname || ' (' || freetext  || '; ' || (certainty * 100.0) || '% certain)',  "+
"                                     measure   || ' '  || vocabname || ' (' || (certainty * 100.0) || '% certain)',  "+
"                                       vocabname || ' (' || freetext  || ')',  "+
"                                       measure   || ' (' || freetext  || ')',  "+
"                                     measure   || ' (' ||(certainty * 100.0) || '% certain)',  "+
"                                     vocabname || ' (' ||(certainty * 100.0) || '% certain)',  "+
"                                     freetext  || ' (' ||(certainty * 100.0) || '% certain)',  "+
"                                     measure,  "+
"                                     vocabname,  "+
"                                     freetext), ' ') as response  "+
"FROM (select * from latestNonDeletedArchentIdentifiers order by attributename) "+
"WHERE uuid = '"+uid+"' "+
"GROUP BY uuid;");

}

//
// Get entity(record) UID from field on hidden tab
//
getEntityId(rectype){

    String uid = getFieldValue(rectype+"/"+rectype+"_uids/FAIMS_UID");
    if("".equals(uid)){
        uid=null;
    }
    return uid;
}

//
// save new entity
//
saveEntity(rectype, andclose) {

    String msg = checkMandatoryAttributes(rectype);
    if (!(isNull(msg) || "".equals(msg))){ 
        showWarning("Logic Error", "Cannot save entity without mandatory attributes:\n"+msg);
        return;
    }
    
    String uid = getEntityId(rectype);
    if("".equals(uid)){
        uid=null;
    }
    
    data = null;

    // save record/entity
    saveTabGroup(rectype, uid, data, null, "saveEntityCallback(\""+rectype+"\", "+andclose+")");
}
//
//
//
saveEntityCallback(rectype, andclose){

    setFieldValue(rectype+"/"+rectype+"_uids/FAIMS_UID", getLastSavedRecordId());
    onClearMap();
    
    if(andclose){
        goBack();
    }
}

//
//
//
deleteEntity(rectype){
    String uid = getFieldValue(rectype+"/"+rectype+"_uids/FAIMS_UID");
    if (!isNull(uid)) {
        showAlert("Confirm Deletion", "Press OK to Delete this entity!", "deleteEntityConfirmed(\""+rectype+"\")", "deleteRecordCanceled()");
    }
}
deleteEntityConfirmed(rectype){
    String uid = getFieldValue(rectype+"/"+rectype+"_uids/FAIMS_UID");
    deleteArchEnt(uid);
    cancelTabGroup(rectype, false);
}
deleteEntityCanceled(){
    showToast("Delete Cancelled.");
}       
/*** END record management function ***/

//
// clear edit/select stacks on control/data, control/map show
//
clearStacks(){
   tabs_select.clear();
   tabs_edit.clear();
   last_invoker = null;
}

/*** main list of records on control/data ***/
//
// reload list of records on control/data show or on rectype selection
//
refreshEntities() {

   clearStacks();

   showToast("Fetching all entities...");
   
   // populateDropDown("control/data/entityTypeList", getEntityTypeList());
   String entName = getEntityNameByTabname( getFieldValue("control/data/entityTypeList") );
   
   populateList("control/data/entityList", fetchEntityList(entName));
}

// make vocabulary
makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname || ' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateDropDown("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login(){
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getFieldValue("user/usertab/users") + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

/*** INIT ATTRIBUTES ***/
loadAllAttributes();
    
/*** SYNC  ***/
setSyncEnabled(true);
setFileSyncEnabled(true);

    
/*** INTERNAL GPS ***/
onEvent("control/gps/connectinternal", "click", "startInternalGPS()");

/*** MAP STUB ***/ 
onClearMap() {}
